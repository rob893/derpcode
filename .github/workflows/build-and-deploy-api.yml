# Secrets used:
# AZURE_VM_USER: to user to ssh into the remote server as
# AZURE_VM_HOST: the IP/Domain to ssh into
# AZURE_VM_SSH_KEY: the private key that matches the public key on the remote server
# AZURE_VM_KNOWN_HOSTS: the known hosts. Run `ssh-keyscan {{ IP/Domain }}` to obtain this

name: Build and Deploy API

on:
  push:
    branches: [master]
    paths:
      - 'DerpCode.API/**'

permissions:
  id-token: write # Required for OIDC
  contents: read

jobs:
  build:
    name: Build API
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: DerpCode.API

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.x'

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json', '**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore

      - name: Build project
        run: dotnet build --no-restore -c Release

      - name: Test project
        run: dotnet test --no-build --verbosity normal -c Release

      - name: Publish project
        run: dotnet publish -c Release -o dist --no-build

      - name: Copy service file to dist
        run: cp ../CI/DerpCode.API.service dist/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: derpcode-api-b${{ github.run_number }}
          path: DerpCode.API/dist
          retention-days: 30

  deploy:
    name: Deploy to Azure VM
    runs-on: ubuntu-latest
    needs:
      - build

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: derpcode-api-b${{ github.run_number }}
          path: dist

      - name: Log in to Azure using OIDC
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: true

      - name: Get runner public IP
        id: ip
        run: |
          echo "ip=$(curl -s https://api.ipify.org)" >> "$GITHUB_OUTPUT"

      - name: Allow IP on NSG
        run: |
          az network nsg rule create \
            --resource-group rherber-rg-ue-d \
            --nsg-name rherber-vm-ue-d-nsg \
            --name AllowGitHubRunner \
            --priority 100 \
            --direction Inbound \
            --access Allow \
            --protocol Tcp \
            --source-address-prefixes ${{ steps.ip.outputs.ip }} \
            --source-port-ranges '*' \
            --destination-address-prefixes '*' \
            --destination-port-ranges 22 \
            --description "Temporary access for GitHub runner"

      - name: Install SSH key # note, need to get ip and dynamicly set allowed ip on vm for this action runner and remove it after the job is done
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.AZURE_VM_SSH_KEY }}
          name: id_rsa
          known_hosts: ${{ secrets.AZURE_VM_KNOWN_HOSTS }}

      - name: Clean VM deployment directory
        run: ssh ${{ secrets.AZURE_VM_USER }}@${{ secrets.AZURE_VM_HOST }} "rm -rf /var/www/html/APIs/DerpCode.API/*"

      - name: Copy application files to VM
        run: scp -r ./dist/* ${{ secrets.AZURE_VM_USER }}@${{ secrets.AZURE_VM_HOST }}:/var/www/html/APIs/DerpCode.API

      - name: Copy service file to VM
        run: scp ./dist/DerpCode.API.service ${{ secrets.AZURE_VM_USER }}@${{ secrets.AZURE_VM_HOST }}:/tmp/DerpCode.API.service

      - name: Install service file and restart service
        run: |
          ssh ${{ secrets.AZURE_VM_USER }}@${{ secrets.AZURE_VM_HOST }} "
            sudo mv /tmp/DerpCode.API.service /etc/systemd/system/DerpCode.API.service &&
            sudo systemctl stop DerpCode.API.service &&
            sudo systemctl enable DerpCode.API.service &&
            sudo systemctl start DerpCode.API.service &&
            sudo systemctl daemon-reload
          "

      - name: Verify deployment
        run: |
          ssh ${{ secrets.AZURE_VM_USER }}@${{ secrets.AZURE_VM_HOST }} "
            sudo systemctl status DerpCode.API.service --no-pager
          "

      - name: Remove NSG rule
        if: always()
        run: |
          az network nsg rule delete \
            --resource-group rherber-rg-ue-d \
            --nsg-name rherber-vm-ue-d-nsg \
            --name AllowGitHubRunner
