#pragma warning disable CS8602
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using DerpCode.Driver.Base;

namespace DerpCode.Driver.ReverseLinkedList
{
    /// <summary>
    /// Problem-specific driver for ReverseLinkedList problem.
    /// </summary>
    public class ReverseLinkedListDriver : BaseProblemDriver
    {
        /// <summary>
        /// Parse input as linked list arrays and expected output as linked list arrays.
        /// </summary>
        public override List<TestCase> ParseTestCases(object input, object expectedOutput)
        {
            var inputDoc = JsonDocument.Parse(input.ToString()!);
            var expectedDoc = JsonDocument.Parse(expectedOutput.ToString()!);
            
            var inputArray = inputDoc.RootElement;
            var expectedArray = expectedDoc.RootElement;
            
            var testCases = new List<TestCase>();
            
            for (int i = 0; i < inputArray.GetArrayLength(); i++)
            {
                testCases.Add(new TestCase
                {
                    Input = this.JsonElementToIntArray(inputArray[i]),
                    ExpectedOutput = this.JsonElementToIntArray(expectedArray[i])
                });
            }
            
            return testCases;
        }

        /// <summary>
        /// Execute the ReverseList method with the test case input.
        /// </summary>
        public override object? ExecuteTestCase(TestCase testCase, int index)
        {
            var solution = new Solution();
            var inputArray = (int[])testCase.Input;
            
            // Build linked list from array
            var inputList = this.BuildListFromArray(inputArray);
            
            // Run the solution
            var result = solution.ReverseList(inputList);
            
            // Convert result back to array for comparison
            return this.ListToArray(result);
        }

        /// <summary>
        /// Compare linked list arrays.
        /// </summary>
        public override bool CompareResults(object? actual, object expected)
        {
            var actualArray = (int[])actual!;
            var expectedArray = (int[])expected;
            
            return this.ArraysEqual(actualArray, expectedArray);
        }

        /// <summary>
        /// Format error message for failed tests.
        /// </summary>
        public override string FormatErrorMessage(object? actual, object expected)
        {
            var actualArray = (int[])actual!;
            var expectedArray = (int[])expected;
            
            return $"Expected [{string.Join(",", expectedArray)}] but got [{string.Join(",", actualArray)}]";
        }

        private ListNode? BuildListFromArray(int[] values)
        {
            if (values.Length == 0)
                return null;

            ListNode? head = null;
            ListNode? current = null;

            for (int i = 0; i < values.Length; i++)
            {
                var node = new ListNode(values[i]);
                if (head == null)
                {
                    head = node;
                    current = node;
                }
                else
                {
                    current!.next = node;
                    current = node;
                }
            }

            return head;
        }

        private int[] ListToArray(ListNode? head)
        {
            var result = new List<int>();
            var current = head;

            while (current != null)
            {
                result.Add(current.val);
                current = current.next;
            }

            return result.ToArray();
        }

        private int[] JsonElementToIntArray(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
                return new int[0];

            var result = new int[element.GetArrayLength()];
            for (int i = 0; i < element.GetArrayLength(); i++)
            {
                var item = element[i];
                result[i] = item.ValueKind == JsonValueKind.Null ? 0 : item.GetInt32();
            }
            return result;
        }

        private bool ArraysEqual(int[] arr1, int[] arr2)
        {
            if (arr1.Length != arr2.Length)
                return false;

            for (int i = 0; i < arr1.Length; i++)
            {
                if (arr1[i] != arr2[i])
                    return false;
            }

            return true;
        }
    }

    public class Program
    {
        public static void Main(string[] args)
        {
            // Create and run the driver
            var driver = new BaseDriver(new ReverseLinkedListDriver());
            driver.Run(args);
        }
    }
}
