import { BaseDriver, IProblemDriver } from './base-driver.js';
import pkg from './solution.js';
const { reverseList, ListNode } = pkg;

/**
 * Problem-specific driver for ReverseLinkedList problem.
 */
class ReverseLinkedListDriver extends IProblemDriver {
    /**
     * Parse input as linked list arrays and expected output as linked list arrays.
     */
    parseTestCases(input, expectedOutput) {
        const testCases = [];
        
        for (let i = 0; i < input.length; i++) {
            testCases.push({
                input: input[i],
                expectedOutput: i < expectedOutput.length ? expectedOutput[i] : []
            });
        }
        
        return testCases;
    }

    /**
     * Execute the reverseList function with the test case input.
     */
    executeTestCase(testCase) {
        // Build linked list from array
        const inputList = this.buildListFromArray(testCase.input);
        
        // Run the solution
        const result = reverseList(inputList);
        
        // Convert result back to array for comparison
        return this.listToArray(result);
    }

    /**
     * Compare linked list arrays.
     */
    compareResults(actual, expected) {
        return this.arraysEqual(actual, expected);
    }

    /**
     * Format error message for failed tests.
     */
    formatErrorMessage(actual, expected) {
        return `Expected ${JSON.stringify(expected)} but got ${JSON.stringify(actual)}`;
    }

    buildListFromArray(arr) {
        if (!arr || arr.length === 0) {
            return null;
        }
        
        let head = null;
        let current = null;

        for (let i = 0; i < arr.length; i++) {
            if (arr[i] !== null) {
                const node = new ListNode(arr[i]);
                if (head === null) {
                    head = node;
                    current = node;
                } else {
                    current.next = node;
                    current = node;
                }
            }
        }

        return head;
    }

    listToArray(head) {
        const result = [];
        let current = head;

        while (current !== null) {
            result.push(current.val);
            current = current.next;
        }

        return result;
    }

    arraysEqual(arr1, arr2) {
        if (arr1.length !== arr2.length) {
            return false;
        }

        for (let i = 0; i < arr1.length; i++) {
            if (arr1[i] !== arr2[i]) {
                return false;
            }
        }

        return true;
    }
}

// Create and run the driver
const driver = new BaseDriver(new ReverseLinkedListDriver());
driver.run();
