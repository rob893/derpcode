import { ProblemDriverBase, BaseDriver, TestCase } from './base-driver';
import { reverseList, ListNode } from './solution';

/**
 * Problem-specific driver for ReverseLinkedList problem.
 */
class ReverseLinkedListDriver extends ProblemDriverBase {
    /**
     * Parse input as arrays representing linked lists.
     */
    parseTestCases(input: any, expectedOutput: any): TestCase[] {
        const testCases: TestCase[] = [];
        
        for (let i = 0; i < input.length; i++) {
            testCases.push({
                input: input[i],
                expectedOutput: expectedOutput[i]
            });
        }
        
        return testCases;
    }

    /**
     * Execute the reverseList function with the test case input.
     */
    executeTestCase(testCase: TestCase, index: number): any {
        // Convert input array to linked list
        const head = this.arrayToLinkedList(testCase.input);
        
        // Run the solution
        const reversedHead = reverseList(head);
        
        // Convert result back to array
        return this.linkedListToArray(reversedHead);
    }

    /**
     * Compare result arrays.
     */
    compareResults(actual: any, expected: any): boolean {
        return this.arraysEqual(actual, expected);
    }

    /**
     * Converts an array to a linked list
     */
    private arrayToLinkedList(arr: number[]): ListNode | null {
        if (!arr || arr.length === 0) {
            return null;
        }
        
        const head = new ListNode(arr[0]);
        let current = head;
        
        for (let i = 1; i < arr.length; i++) {
            current.next = new ListNode(arr[i]);
            current = current.next;
        }
        
        return head;
    }

    /**
     * Converts a linked list to an array
     */
    private linkedListToArray(head: ListNode | null): number[] {
        const result: number[] = [];
        let current = head;
        
        while (current !== null) {
            result.push(current.val);
            current = current.next;
        }
        
        return result;
    }

    /**
     * Compare two arrays for equality
     */
    private arraysEqual(arr1: number[], arr2: number[]): boolean {
        if (arr1.length !== arr2.length) {
            return false;
        }
        
        for (let i = 0; i < arr1.length; i++) {
            if (arr1[i] !== arr2[i]) {
                return false;
            }
        }
        
        return true;
    }
}

// Create and run the driver
const driver = new BaseDriver(new ReverseLinkedListDriver());
driver.run();
