import java.util.*;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonParser;

/**
 * Problem-specific driver for ReverseLinkedList problem.
 */
class ReverseLinkedListDriver extends ProblemDriverBase {
    @Override
    public List<TestCase> parseTestCases(JsonArray input, JsonArray expectedOutput) {
        List<TestCase> testCases = new ArrayList<>();
        
        for (int i = 0; i < input.size(); i++) {
            JsonArray inputArray = input.get(i).getAsJsonArray();
            JsonArray expectedArray = expectedOutput.get(i).getAsJsonArray();
            
            ListNode inputList = arrayToLinkedList(inputArray);
            ListNode expectedList = arrayToLinkedList(expectedArray);
            
            testCases.add(new TestCase(inputList, expectedList));
        }
        
        return testCases;
    }

    @Override
    public Object executeTestCase(TestCase testCase, int index) throws Exception {
        ListNode input = (ListNode) testCase.getInput();
        Solution solution = new Solution();
        return solution.reverseList(input);
    }

    @Override
    public boolean compareResults(Object actual, Object expected) {
        return compareLinkedLists((ListNode) actual, (ListNode) expected);
    }
    
    private ListNode arrayToLinkedList(JsonArray array) {
        if (array.size() == 0) return null;
        
        ListNode dummy = new ListNode(0);
        ListNode current = dummy;
        
        for (int i = 0; i < array.size(); i++) {
            current.next = new ListNode(array.get(i).getAsInt());
            current = current.next;
        }
        
        return dummy.next;
    }
    
    private boolean compareLinkedLists(ListNode list1, ListNode list2) {
        while (list1 != null && list2 != null) {
            if (list1.val != list2.val) return false;
            list1 = list1.next;
            list2 = list2.next;
        }
        return list1 == null && list2 == null;
    }
}

class Program {
    public static void main(String[] args) {
        // Create and run the driver
        BaseDriver driver = new BaseDriver(new ReverseLinkedListDriver());
        driver.run(args);
    }
}
