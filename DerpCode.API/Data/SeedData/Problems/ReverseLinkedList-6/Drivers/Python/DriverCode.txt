import json
import sys
import time
from typing import Optional, List
from solution import Solution, ListNode

def main():
    if len(sys.argv) < 4:
        print("Usage: python index.py <inputFilePath> <expectedOutputFilePath> <resultFilePath>", file=sys.stderr)
        sys.exit(1)

    input_path, expected_path, result_path = sys.argv[1:4]

    result = {
        'pass': False,
        'testCaseCount': 0,
        'passedTestCases': 0,
        'failedTestCases': 0,
        'errorMessage': '',
        'executionTimeInMs': 0,
        'testCaseResults': []
    }

    try:
        with open(input_path, 'r') as f:
            input_data = f.read()
        with open(expected_path, 'r') as f:
            expected_output = f.read()

        start_time = time.time()

        test_results = run_tests(input_data, expected_output)

        result['pass'] = test_results['pass']
        result['testCaseCount'] = test_results['testCaseCount']
        result['passedTestCases'] = test_results['passedTestCases']
        result['failedTestCases'] = test_results['failedTestCases']
        result['testCaseResults'] = test_results['testCaseResults']
        result['executionTimeInMs'] = int((time.time() - start_time) * 1000)

    except Exception as err:
        print(f"Error reading files: {err}", file=sys.stderr)
        result['errorMessage'] = str(err)

    with open(result_path, 'w') as f:
        json.dump(result, f, indent=2)

def run_tests(input_json_str, expected_output_json_str):
    input_data = json.loads(input_json_str)
    expected_output = json.loads(expected_output_json_str)
    
    test_case_count = len(input_data)
    passed_test_cases = 0
    failed_test_cases = 0
    test_case_results = []

    solution = Solution()

    for i in range(test_case_count):
        print(f"|derpcode-start-test-{i}|")
        start_time = time.time()
        
        try:
            # Build input linked list from array
            input_list = build_list_from_array(input_data[i])
            
            # Run the solution
            result = solution.reverseList(input_list)
            
            # Convert result back to array for comparison
            actual_output = list_to_array(result)
            
            print(f"|derpcode-end-test-{i}|")
            
            # Get expected output
            expected = expected_output[i] if i < len(expected_output) else []
            
            # Compare arrays
            passed = actual_output == expected

            test_case_results.append({
                'testCaseIndex': i,
                'pass': passed,
                'errorMessage': None if passed else f"Expected {expected} but got {actual_output}",
                'executionTimeInMs': int((time.time() - start_time) * 1000),
                'input': input_data[i],
                'expectedOutput': expected,
                'actualOutput': actual_output,
                'isHidden': False
            })

            if passed:
                passed_test_cases += 1
            else:
                failed_test_cases += 1
                
        except Exception as err:
            print(f"|derpcode-end-test-{i}|")
            
            test_case_results.append({
                'testCaseIndex': i,
                'pass': False,
                'errorMessage': str(err),
                'executionTimeInMs': int((time.time() - start_time) * 1000),
                'input': input_data[i] if i < len(input_data) else None,
                'expectedOutput': expected_output[i] if i < len(expected_output) else None,
                'actualOutput': None,
                'isHidden': False
            })
            
            failed_test_cases += 1

    return {
        'testCaseCount': test_case_count,
        'passedTestCases': passed_test_cases,
        'failedTestCases': failed_test_cases,
        'pass': passed_test_cases == test_case_count,
        'testCaseResults': test_case_results
    }

def build_list_from_array(arr):
    if not arr:
        return None
    
    head = ListNode(arr[0])
    current = head
    
    for i in range(1, len(arr)):
        current.next = ListNode(arr[i])
        current = current.next
    
    return head

def list_to_array(head):
    result = []
    current = head
    
    while current:
        result.append(current.val)
        current = current.next
    
    return result

if __name__ == "__main__":
    main()
