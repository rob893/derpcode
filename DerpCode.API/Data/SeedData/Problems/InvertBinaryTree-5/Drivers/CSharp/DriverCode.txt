#pragma warning disable CS8602
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using DerpCode.Driver.Base;

namespace DerpCode.Driver.InvertBinaryTree
{
    /// <summary>
    /// Problem-specific driver for InvertBinaryTree problem.
    /// </summary>
    public class InvertBinaryTreeDriver : BaseProblemDriver
    {
        /// <summary>
        /// Parse input as tree arrays and expected output as tree arrays.
        /// </summary>
        public override List<TestCase> ParseTestCases(object input, object expectedOutput)
        {
            var inputDoc = JsonDocument.Parse(input.ToString()!);
            var expectedDoc = JsonDocument.Parse(expectedOutput.ToString()!);
            
            var inputArray = inputDoc.RootElement;
            var expectedArray = expectedDoc.RootElement;
            
            var testCases = new List<TestCase>();
            
            for (int i = 0; i < inputArray.GetArrayLength(); i++)
            {
                testCases.Add(new TestCase
                {
                    Input = this.JsonElementToIntArray(inputArray[i]),
                    ExpectedOutput = this.JsonElementToIntArray(expectedArray[i])
                });
            }
            
            return testCases;
        }

        /// <summary>
        /// Execute the InvertTree method with the test case input.
        /// </summary>
        public override object? ExecuteTestCase(TestCase testCase, int index)
        {
            var solution = new Solution();
            var inputArray = (int?[])testCase.Input;
            
            // Build tree from array
            var inputTree = this.BuildTreeFromArray(inputArray);
            
            // Run the solution
            var result = solution.InvertTree(inputTree);
            
            // Convert result back to array for comparison
            return this.TreeToArray(result);
        }

        /// <summary>
        /// Compare tree arrays.
        /// </summary>
        public override bool CompareResults(object? actual, object expected)
        {
            var actualArray = (int?[])actual!;
            var expectedArray = (int?[])expected;
            
            return this.ArraysEqual(actualArray, expectedArray);
        }

        /// <summary>
        /// Format error message for failed tests.
        /// </summary>
        public override string FormatErrorMessage(object? actual, object expected)
        {
            var actualArray = (int?[])actual!;
            var expectedArray = (int?[])expected;
            
            return $"Expected [{string.Join(",", expectedArray)}] but got [{string.Join(",", actualArray)}]";
        }

        private TreeNode? BuildTreeFromArray(int?[] values)
        {
            if (values.Length == 0)
                return null;

            return this.BuildTree(values, 0);
        }

        private TreeNode? BuildTree(int?[] values, int index)
        {
            if (index >= values.Length || values[index] == null)
                return null;

            var node = new TreeNode(values[index]!.Value);
            node.left = this.BuildTree(values, 2 * index + 1);
            node.right = this.BuildTree(values, 2 * index + 2);
            return node;
        }

        private int?[] TreeToArray(TreeNode? root)
        {
            if (root == null)
                return new int?[0];

            var result = new List<int?>();
            var queue = new Queue<TreeNode?>();
            queue.Enqueue(root);

            while (queue.Count > 0)
            {
                var node = queue.Dequeue();
                if (node == null)
                {
                    result.Add(null);
                }
                else
                {
                    result.Add(node.val);
                    queue.Enqueue(node.left);
                    queue.Enqueue(node.right);
                }
            }

            // Remove trailing nulls
            while (result.Count > 0 && result[result.Count - 1] == null)
            {
                result.RemoveAt(result.Count - 1);
            }

            return result.ToArray();
        }

        private int?[] JsonElementToIntArray(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
                return new int?[0];

            var result = new int?[element.GetArrayLength()];
            for (int i = 0; i < element.GetArrayLength(); i++)
            {
                var item = element[i];
                result[i] = item.ValueKind == JsonValueKind.Null ? null : item.GetInt32();
            }
            return result;
        }

        private bool ArraysEqual(int?[] arr1, int?[] arr2)
        {
            if (arr1.Length != arr2.Length)
                return false;

            for (int i = 0; i < arr1.Length; i++)
            {
                if (arr1[i] != arr2[i])
                    return false;
            }

            return true;
        }
    }

    public class Program
    {
        public static void Main(string[] args)
        {
            // Create and run the driver
            var driver = new BaseDriver(new InvertBinaryTreeDriver());
            driver.Run(args);
        }
    }
}
