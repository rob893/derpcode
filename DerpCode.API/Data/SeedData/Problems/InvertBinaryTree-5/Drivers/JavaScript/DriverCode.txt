import { BaseDriver, IProblemDriver } from './base-driver.js';
import pkg from './solution.js';
const { invertTree, TreeNode } = pkg;

/**
 * Problem-specific driver for InvertBinaryTree problem.
 */
class InvertBinaryTreeDriver extends IProblemDriver {
    /**
     * Parse input as tree arrays and expected output as tree arrays.
     */
    parseTestCases(input, expectedOutput) {
        const testCases = [];
        
        for (let i = 0; i < input.length; i++) {
            testCases.push({
                input: input[i],
                expectedOutput: i < expectedOutput.length ? expectedOutput[i] : []
            });
        }
        
        return testCases;
    }

    /**
     * Execute the invertTree function with the test case input.
     */
    executeTestCase(testCase) {
        // Build tree from array
        const inputTree = this.buildTreeFromArray(testCase.input);
        
        // Run the solution
        const result = invertTree(inputTree);
        
        // Convert result back to array for comparison
        return this.treeToArray(result);
    }

    /**
     * Compare tree arrays.
     */
    compareResults(actual, expected) {
        return this.arraysEqual(actual, expected);
    }

    /**
     * Format error message for failed tests.
     */
    formatErrorMessage(actual, expected) {
        return `Expected ${JSON.stringify(expected)} but got ${JSON.stringify(actual)}`;
    }

    buildTreeFromArray(arr) {
        if (!arr || arr.length === 0 || arr[0] === null) {
            return null;
        }
        
        function buildTree(values, index) {
            if (index >= values.length || values[index] === null) {
                return null;
            }
            
            const node = new TreeNode(values[index]);
            node.left = buildTree(values, 2 * index + 1);
            node.right = buildTree(values, 2 * index + 2);
            return node;
        }
        
        return buildTree(arr, 0);
    }

    treeToArray(root) {
        if (!root) {
            return [];
        }
        
        const result = [];
        const queue = [root];
        
        while (queue.length > 0) {
            const node = queue.shift();
            if (node === null) {
                result.push(null);
            } else {
                result.push(node.val);
                queue.push(node.left);
                queue.push(node.right);
            }
        }
        
        // Remove trailing nulls
        while (result.length > 0 && result[result.length - 1] === null) {
            result.pop();
        }
        
        return result;
    }

    arraysEqual(arr1, arr2) {
        if (arr1.length !== arr2.length) {
            return false;
        }
        
        for (let i = 0; i < arr1.length; i++) {
            if (arr1[i] !== arr2[i]) {
                return false;
            }
        }
        
        return true;
    }
}

// Create and run the driver
const driver = new BaseDriver(new InvertBinaryTreeDriver());
driver.run();
