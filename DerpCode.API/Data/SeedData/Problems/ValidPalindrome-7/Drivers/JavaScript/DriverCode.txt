import fs from 'fs';
import { isPalindrome } from './solution.js';

function main() {
    const args = process.argv.slice(2);

    if (args.length < 3) {
        console.error('Usage: node index.js <inputFilePath> <expectedOutputFilePath> <resultFilePath>');
        process.exit(1);
    }

    const [inputPath, expectedPath, resultPath] = args;

    const result = {
        pass: false,
        testCaseCount: 0,
        passedTestCases: 0,
        failedTestCases: 0,
        errorMessage: '',
        executionTimeInMs: 0,
        testCaseResults: []
    };

    try {
        const input = fs.readFileSync(inputPath, 'utf8');
        const expectedOutput = fs.readFileSync(expectedPath, 'utf8');

        const start = Date.now();

        const testResults = runTests(input, expectedOutput);

        result.pass = testResults.pass;
        result.testCaseCount = testResults.testCaseCount;
        result.passedTestCases = testResults.passedTestCases;
        result.failedTestCases = testResults.failedTestCases;
        result.testCaseResults = testResults.testCaseResults;
        result.executionTimeInMs = Date.now() - start;

    } catch (err) {
        console.error('Error reading files:' + err.message);
        result.errorMessage = err.message;
    }

    fs.writeFileSync(resultPath, JSON.stringify(result, null, 2));
}

function runTests(inputJsonStr, expectedOutputJsonStr) {
    const input = JSON.parse(inputJsonStr);
    const expectedOutput = JSON.parse(expectedOutputJsonStr);
    
    const testCaseCount = input.length;
    let passedTestCases = 0;
    let failedTestCases = 0;
    const testCaseResults = [];

    for (let i = 0; i < testCaseCount; i++) {
        console.log(`|derpcode-start-test-${i}|`);
        const start = Date.now();

        const testCaseResult = {
            testCaseIndex: i,
            pass: false,
            errorMessage: '',
            executionTimeInMs: 0,
            input: input[i],
            expectedOutput: expectedOutput[i],
            actualOutput: null,
            isHidden: false
        };

        try {
            // Run the solution
            const actualOutput = isPalindrome(input[i]);

            testCaseResult.actualOutput = actualOutput;
            testCaseResult.executionTimeInMs = Date.now() - start;

            // Compare results
            const testPassed = actualOutput === expectedOutput[i];
            testCaseResult.pass = testPassed;

            if (testPassed) {
                passedTestCases++;
            } else {
                failedTestCases++;
                testCaseResult.errorMessage = `Expected: ${expectedOutput[i]}, but got: ${actualOutput}`;
            }

        } catch (err) {
            failedTestCases++;
            testCaseResult.pass = false;
            testCaseResult.errorMessage = `Runtime error: ${err.message}`;
            testCaseResult.executionTimeInMs = Date.now() - start;
        }

        console.log(`|derpcode-end-test-${i}|`);
        testCaseResults.push(testCaseResult);
    }

    return {
        pass: failedTestCases === 0,
        testCaseCount,
        passedTestCases,
        failedTestCases,
        testCaseResults
    };
}

main();
