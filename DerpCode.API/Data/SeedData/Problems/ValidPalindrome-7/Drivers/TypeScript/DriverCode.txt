import { ProblemDriverBase, BaseDriver, TestCase } from './base-driver';
import { isPalindrome } from './solution';

/**
 * Problem-specific driver for ValidPalindrome problem.
 */
class ValidPalindromeDriver extends ProblemDriverBase {
    /**
     * Parse input as array of strings and expected output as array of booleans.
     */
    parseTestCases(input: any, expectedOutput: any): TestCase[] {
        const testCases: TestCase[] = [];
        
        for (let i = 0; i < input.length; i++) {
            testCases.push({
                input: input[i],
                expectedOutput: expectedOutput[i]
            });
        }
        
        return testCases;
    }

    /**
     * Execute the isPalindrome function with the test case input.
     */
    executeTestCase(testCase: TestCase, index: number): any {
        return isPalindrome(testCase.input);
    }

    /**
     * Compare results using simple equality.
     */
    compareResults(actual: any, expected: any): boolean {
        return actual === expected;
    }
}

// Create and run the driver
const driver = new BaseDriver(new ValidPalindromeDriver());
driver.run();
