use std::rc::Rc;
use std::cell::RefCell;
use std::collections::VecDeque;

#[derive(Debug, PartialEq, Eq)]
pub struct TreeNode {
    pub val: i32,
    pub left: Option<Rc<RefCell<TreeNode>>>,
    pub right: Option<Rc<RefCell<TreeNode>>>,
}

impl TreeNode {
    #[inline]
    pub fn new(val: i32) -> Self {
        TreeNode {
            val,
            left: None,
            right: None
        }
    }
}

pub fn level_order(root: Option<Rc<RefCell<TreeNode>>>) -> Vec<i32> {
    if root.is_none() {
        return vec![];
    }
    
    let mut result = Vec::new();
    let mut queue = VecDeque::new();
    queue.push_back(root.unwrap());
    
    while !queue.is_empty() {
        let node = queue.pop_front().unwrap();
        let borrowed = node.borrow();
        result.push(borrowed.val);
        
        if let Some(left) = &borrowed.left {
            queue.push_back(left.clone());
        }
        if let Some(right) = &borrowed.right {
            queue.push_back(right.clone());
        }
    }
    
    result
}
