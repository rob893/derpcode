import sys
import json
from collections import deque
from typing import List, Optional, Any, Dict
from base_driver import BaseDriver, IProblemDriver

# Import user solution
sys.path.append('.')
from solution import level_order

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

class LevelOrderTraversalDriver(IProblemDriver):
    """Problem-specific driver for Binary Tree Level Order Traversal problem."""
    
    def parse_test_cases(self, input_data: Any, expected_output: Any) -> List[Dict[str, Any]]:
        """Parse input as tree structures and expected output as flat arrays of integers."""
        test_cases = []
        
        for i in range(len(input_data)):
            tree_array = input_data[i]["tree"]
            expected = expected_output[i]
            
            test_cases.append({
                "input": {"tree_array": tree_array},
                "expectedOutput": expected
            })
        
        return test_cases
    
    def execute_test_case(self, test_case: Dict[str, Any], index: int) -> Any:
        """Execute the level_order function with the test case inputs."""
        tree_array = test_case["input"]["tree_array"]
        root = self._build_tree_from_array(tree_array)
        return level_order(root)
    
    def compare_results(self, actual: Any, expected: Any) -> bool:
        """Compare actual vs expected results for flat integer lists."""
        if not isinstance(actual, list) or not isinstance(expected, list):
            return False
        return actual == expected
    
    def _build_tree_from_array(self, nodes: List) -> Optional[TreeNode]:
        """Build a binary tree from level-order array representation."""
        if not nodes or nodes[0] is None:
            return None
        
        root = TreeNode(nodes[0])
        queue = deque([root])
        i = 1
        
        while queue and i < len(nodes):
            current = queue.popleft()
            
            if i < len(nodes) and nodes[i] is not None:
                current.left = TreeNode(nodes[i])
                queue.append(current.left)
            i += 1
            
            if i < len(nodes) and nodes[i] is not None:
                current.right = TreeNode(nodes[i])
                queue.append(current.right)
            i += 1
        
        return root

driver = BaseDriver(LevelOrderTraversalDriver())
driver.run()
