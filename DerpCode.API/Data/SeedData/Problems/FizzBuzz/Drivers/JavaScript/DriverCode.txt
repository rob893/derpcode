import fs from 'fs';
import path from 'path';
import { fizzBuzz } from './solution.js'

function main() {
    const args = process.argv.slice(2);

    if (args.length < 3) {
        console.error('Usage: node index.js <inputFilePath> <expectedOutputFilePath> <resultFilePath>');
        process.exit(1);
    }

    const [inputPath, expectedPath, resultPath] = args;

    const result = {
        pass: false,
        testCaseCount: 0,
        passedTestCases: 0,
        failedTestCases: 0,
        errorMessage: '',
        executionTimeInMs: 0,
        testCaseResults: []
    };

    try {
        const input = fs.readFileSync(inputPath, 'utf8');
        const expectedOutput = fs.readFileSync(expectedPath, 'utf8');

        const start = Date.now();

        const testResults = runTests(input, expectedOutput);

        result.pass = testResults.pass;
        result.testCaseCount = testResults.testCaseCount;
        result.passedTestCases = testResults.passedTestCases;
        result.failedTestCases = testResults.failedTestCases;
        result.testCaseResults = testResults.testCaseResults;
        result.executionTimeInMs = Date.now() - start;

    } catch (err) {
        console.error('Error reading files:' + err.message);
        result.errorMessage = err.message;
    }

    fs.writeFileSync(resultPath, JSON.stringify(result, null, 2));
}

function runTests(inputJsonStr, expectedOutputJsonStr) {
    const input = JSON.parse(inputJsonStr);         // array of integers
    const expectedOutput = JSON.parse(expectedOutputJsonStr); // array of strings
    const testCaseCount = input.length;
    let passedTestCases = 0;
    let failedTestCases = 0;
    const testCaseResults = [];

    for (let i = 0; i < input.length; i++) {
        const number = input[i];
        
        const testCaseStart = Date.now();
        const result = fizzBuzz(number);           // your test function
        const testCaseEnd = Date.now();
        
        const expected = expectedOutput[i];
        const passed = result === expected;

        testCaseResults.push({
            testCaseIndex: i,
            pass: passed,
            errorMessage: passed ? null : `Expected '${expected}' but got '${result}'`,
            executionTimeInMs: testCaseEnd - testCaseStart,
            input: number,
            expectedOutput: expected,
            actualOutput: result,
            isHidden: false
        });

        if (passed) {
            passedTestCases++;
        } else {
            failedTestCases++;
        }
    }

    return {
        testCaseCount,
        passedTestCases,
        failedTestCases,
        pass: passedTestCases === testCaseCount,
        testCaseResults
    };
}

main();
