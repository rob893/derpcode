use serde_json::Value;

mod base_driver;
use base_driver::{BaseDriver, ProblemDriver, TestCase};

mod solution;
use solution::Solution;

/// Problem-specific driver for FizzBuzz problem.
pub struct FizzBuzzDriver;

impl ProblemDriver for FizzBuzzDriver {
    /// Parse input as array of integers and expected output as array of strings.
    fn parse_test_cases(&self, input: &Value, expected_output: &Value) -> Vec<TestCase> {
        let input_array = input.as_array().expect("Input should be an array");
        let expected_array = expected_output.as_array().expect("Expected output should be an array");
        
        let mut test_cases = Vec::new();
        
        for i in 0..input_array.len() {
            let number = input_array[i].as_i64().expect("Input should be integer") as i32;
            let expected = expected_array[i].clone();
            
            test_cases.push(TestCase {
                input: serde_json::json!(number),
                expected_output: expected,
            });
        }
        
        test_cases
    }

    /// Execute the fizz_buzz function with the test case input.
    fn execute_test_case(&self, test_case: &TestCase, _index: usize) -> Result<Value, Box<dyn std::error::Error>> {
        let number = test_case.input.as_i64().ok_or("Missing number input")? as i32;
        
        let result = Solution::fizz_buzz(number);
        Ok(serde_json::json!(result))
    }

    /// Compare results using simple equality.
    fn compare_results(&self, actual: &Value, expected: &Value) -> bool {
        actual == expected
    }
}

fn main() {
    // Create and run the driver
    let driver = BaseDriver::new(FizzBuzzDriver);
    driver.run();
}
