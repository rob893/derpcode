import json
from typing import List, Dict, Any
from base_driver import BaseDriver, BaseProblemDriver
from solution import two_sum

class TargetPairDriver(BaseProblemDriver):
    """Problem-specific driver for Target Pair problem."""

    def parse_test_cases(self, input_data: Any, expected_output: Any) -> List[Dict[str, Any]]:
        """Parse input as arrays with nums and target."""
        input_array = json.loads(input_data) if isinstance(input_data, str) else input_data
        expected_array = json.loads(expected_output) if isinstance(expected_output, str) else expected_output
        
        test_cases = []
        
        for i in range(len(input_array)):
            nums = input_array[i][0]
            target = input_array[i][1]
            
            test_cases.append({
                'input': {'nums': nums, 'target': target},
                'expectedOutput': expected_array[i] if i < len(expected_array) else None
            })
        
        return test_cases

    def execute_test_case(self, test_case: Dict[str, Any], index: int) -> Any:
        """Execute a single test case for target pair."""
        nums = test_case['input']['nums']
        target = test_case['input']['target']
        return two_sum(nums, target)

    def compare_results(self, actual: Any, expected: Any) -> bool:
        """Compare if two arrays contain the same elements (order doesn't matter for this problem)."""
        if not isinstance(actual, list) or not isinstance(expected, list):
            return actual == expected
        
        if len(actual) != len(expected):
            return False
        
        # For target pair, we just need to check if the indices are correct
        # The order doesn't matter as long as both indices point to numbers that sum to target
        return (actual[0] == expected[0] and actual[1] == expected[1]) or \
               (actual[0] == expected[1] and actual[1] == expected[0])

    def format_error_message(self, actual: Any, expected: Any) -> str:
        """Format error message for failed tests."""
        return f"Expected {expected} but got {actual}"

def main():
    """Main entry point for the driver."""
    driver = BaseDriver(TargetPairDriver())
    driver.run()

if __name__ == "__main__":
    main()
