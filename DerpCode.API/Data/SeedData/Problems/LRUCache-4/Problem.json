{
  "Id": 4,
  "Name": "LRU Cache",
  "Description": "Design a data structure that follows the constraints of a **Least Recently Used (LRU) cache**.\n\n## Requirements\n\nImplement the `LRUCache` class:\n\n- `LRUCache(int capacity)` - Initialize the LRU cache with positive size capacity\n- `int get(int key)` - Return the value of the key if the key exists, otherwise return `-1`\n- `void put(int key, int value)` - Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache. If the number of keys exceeds the capacity from this operation, evict the least recently used key\n\n> âš¡ **Performance Requirement**: The functions `get` and `put` must each run in **O(1)** average time complexity.\n\n## Example\n\n```java\nLRUCache lRUCache = new LRUCache(2);\nlRUCache.put(1, 1); // cache is {1=1}\nlRUCache.put(2, 2); // cache is {1=1, 2=2}\nlRUCache.get(1);    // return 1, cache is {2=2, 1=1} (1 becomes most recent)\nlRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3}\nlRUCache.get(2);    // returns -1 (not found)\nlRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is {3=3, 4=4}\nlRUCache.get(1);    // return -1 (not found)\nlRUCache.get(3);    // return 3\nlRUCache.get(4);    // return 4\n```\n\n## Key Concepts\n\n- **Least Recently Used**: When the cache reaches capacity, the item that hasn't been accessed for the longest time gets evicted\n- **Access**: Both `get()` and `put()` operations count as accessing an item\n- **Recency Order**: Recently accessed items should be considered \"most recent\"",
  "ExplanationArticle": {
    "Id": 4,
    "UserId": 1,
    "Title": "LRU Cache Explanation",
    "Content": "",
    "UpVotes": 0,
    "DownVotes": 0,
    "CreatedAt": "2025-07-25T12:00:00.000000+00:00",
    "UpdatedAt": "2025-07-25T12:00:00.000000+00:00",
    "LastEditedById": 1,
    "Type": "ProblemSolution",
    "Tags": [
      {
        "Id": 3,
        "Name": "Data Structures"
      },
      {
        "Id": 4,
        "Name": "Hash Table"
      },
      {
        "Id": 5,
        "Name": "Linked List"
      },
      {
        "Id": 6,
        "Name": "Design"
      }
    ]
  },
  "Difficulty": "Medium",
  "ExpectedOutput": [null, null, null, 1, null, -1, null, -1, 3, 4],
  "Input": [
    ["LRUCache", "put", "put", "get", "put", "get", "put", "get", "get", "get"],
    [2, [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]
  ],
  "Hints": [
    "Think about combining a hash table with a doubly linked list.",
    "The hash table provides O(1) access, while the linked list maintains order.",
    "When an item is accessed, move it to the front of the list.",
    "When capacity is exceeded, remove the item at the back of the list."
  ],
  "Tags": [
    {
      "Id": 3,
      "Name": "Data Structures"
    },
    {
      "Id": 4,
      "Name": "Hash Table"
    },
    {
      "Id": 5,
      "Name": "Linked List"
    },
    {
      "Id": 6,
      "Name": "Design"
    }
  ],
  "Drivers": [
    {
      "Id": 20,
      "ProblemId": 4,
      "Language": "CSharp",
      "UITemplate": "",
      "Image": "code-executor-csharp",
      "DriverCode": "",
      "Answer": ""
    },
    {
      "Id": 21,
      "ProblemId": 4,
      "Language": "JavaScript",
      "UITemplate": "",
      "Image": "code-executor-javascript",
      "DriverCode": "",
      "Answer": ""
    },
    {
      "Id": 22,
      "ProblemId": 4,
      "Language": "TypeScript",
      "UITemplate": "",
      "Image": "code-executor-typescript",
      "DriverCode": "",
      "Answer": ""
    },
    {
      "Id": 23,
      "ProblemId": 4,
      "Language": "Rust",
      "UITemplate": "",
      "Image": "code-executor-rust",
      "DriverCode": "",
      "Answer": ""
    },
    {
      "Id": 24,
      "ProblemId": 4,
      "Language": "Python",
      "UITemplate": "",
      "Image": "code-executor-python",
      "DriverCode": "",
      "Answer": ""
    },
    {
      "Id": 25,
      "ProblemId": 4,
      "Language": "Java",
      "UITemplate": "",
      "Image": "code-executor-java",
      "DriverCode": "",
      "Answer": ""
    }
  ]
}
